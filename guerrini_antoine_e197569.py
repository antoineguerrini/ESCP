# -*- coding: utf-8 -*-
"""Guerrini_Antoine_e197569.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KvwV4sevr-jgzVJFzBawrfkNPOCgJOOE
"""

import pandas as pd
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)  
pd.set_option('display.max_rows', None)  
pd.set_option('display.max_colwidth', -1)

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Train_ESCP.csv')

"""# Understanding the data

We have an encrpyted dataset composed of sales data as purchase time, some categoricals and quantity. Associated to each transactions we have an id. The main objective is to predict the probability of the outcome of the transaction buy / not buy a specific id which is indicated in the dependant variable id.

We first need to conduct some basic checking
"""

df.describe()

df.isnull().sum()

"""# Pre-processing"""

df.corr()[1:2]

"""We can discard purchaseTime, visitTime, hour since they have a high correlation with our dependant variable. Furthermore we can discard id because we don't want to predict an action regarding a specific id."""

df2 = df.drop(['id', 'purchaseTime', 'visitTime','hour'], axis=1)

X = df2.loc[:, df2.columns != "label"]
y = df2.loc[:, df2.columns == "label"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state = 0, stratify = y)

"""### Over sampling"""

from imblearn.over_sampling import SMOTE

sm = SMOTE(sampling_strategy = 'minority', random_state = 42)
X_train, y_train = sm.fit_resample(X_train, y_train)

"""# Modeling 1: Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=42, n_estimators=60)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict_proba(X_test)
y_pred_rfc = rfc.predict(X_test)

print(rfc.score(X_train, y_train))
print(rfc.score(X_test, y_test))

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_rfc))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, y_pred_rfc))

from sklearn.model_selection import cross_val_score
from numpy import mean
scores = cross_val_score(rfc, X, y, scoring='roc_auc',n_jobs=-1)
print('Mean ROC AUC: %.3f' % mean(scores))

"""# Modeling 2: Logistic"""

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression()
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, y_pred))

from sklearn.model_selection import cross_val_score
from numpy import mean
scores = cross_val_score(clf, X, y, scoring='roc_auc', n_jobs=-1)
print('Mean ROC AUC: %.3f' % mean(scores))

"""# Test Set"""

from google.colab import files
uploaded = files.upload()

df_test = pd.read_csv('test1.csv')

df_test.tail()

del df_test['label']

ID = df_test['id']

df_test = df_test.drop(['id', 'purchaseTime', 'visitTime','hour'], axis=1)

predictions = pd.DataFrame(rfc.predict_proba(df_test), columns=['Prob_0','Prob_1'])

df_test['Prob_0'] = predictions['Prob_0']
df_test['Prob_1'] = predictions['Prob_1']
df_test['ID'] = ID

Result = pd.DataFrame()
Result['ID'] = df_test['ID']
Result['Prob_0'] = df_test['Prob_0']
Result['Prob_1'] = df_test['Prob_1']

Result.set_index('ID')

Result.to_csv("Prediction_ESCP.csv")

